// backend/routes/api/users.js
const express = require('express');
const bcrypt = require('bcryptjs');

const { setTokenCookie, requireAuth } = require('../../utils/auth');
const { User } = require('../../db/models');

const router = express.Router();

const { check } = require('express-validator');
const { handleValidationErrors } = require('../../utils/validation');

// Sign up
router.post(
    '/',
    async (req, res) => {
        const { email, password, username, firstName, lastName } = req.body;
        const hashedPassword = bcrypt.hashSync(password);
        // Error response: User already exists with the specified email
        const emailCheck = await User.findOne({
            where: { email }
        })

        if (emailCheck) {
            res.statusCode = 500;
            return res.json({
                "message": "User already exists",
                "errors": {
                    "email": "User with that email already exists"
                }
            })
        }

        //Error response: User already exists with the specified username
        const usernameCheck = await User.findOne({
            where: { username }
        });

        if (usernameCheck) {
            res.statusCode = 500;
            return res.json({
                "message": "User already exists",
                "errors": {
                    "username": "User with that username already exists"
                }
            })
        }

        try {
            const user = await User.create({ email, username, hashedPassword, firstName, lastName });
            const safeUser = {
                id: user.id,
                email: user.email,
                username: user.username,
                firstName: user.firstName,
                lastName: user.lastName,
                password: user.hashedPassword
            };

            await setTokenCookie(res, safeUser);

            return res.json({
                user: safeUser
            });
        } catch {
            res.statusCode = 404;
            return res.json({
                "message": "Bad Request", // (or "Validation error" if generated by Sequelize),
                "errors": {
                    "email": "Invalid email",
                    "username": "Username is required",
                    "firstName": "First Name is required",
                    "lastName": "Last Name is required"
                }
            })
        }



    }
);

const validateSignup = [
    check('email')
        .exists({ checkFalsy: true })
        .isEmail()
        .withMessage('Please provide a valid email.'),
    check('username')
        .exists({ checkFalsy: true })
        .isLength({ min: 4 })
        .withMessage('Please provide a username with at least 4 characters.'),
    check('username')
        .not()
        .isEmail()
        .withMessage('Username cannot be an email.'),
    check('password')
        .exists({ checkFalsy: true })
        .isLength({ min: 6 })
        .withMessage('Password must be 6 characters or more.'),
    handleValidationErrors
];

// // Sign up
// router.post(
//     '/',
//     validateSignup,
//     async (req, res) => {
//         const { email, password, username } = req.body;
//         const hashedPassword = bcrypt.hashSync(password);
//         const user = await User.create({ email, username, hashedPassword });

//         const safeUser = {
//             id: user.id,
//             email: user.email,
//             username: user.username,
//         };

//         await setTokenCookie(res, safeUser);

//         return res.json({
//             user: safeUser
//         });
//     }
// );

module.exports = router;
